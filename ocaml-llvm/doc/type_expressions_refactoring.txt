
Type expressions grammar:
==========================

typexpr	::=	
	''' ident  
 	∣ '_'
 	∣ '(' typexpr ')'
	| [['?'] label-name ':'] typexpr '->' typexpr  
	| typexpr { '*' typexpr }+  
 	| typeconstr
 	| typexpr typeconstr
 	| '(' typexpr { ',' typexpr } ')' typeconstr  
 	∣ typexpr 'as' ''' ident
 	| polymorphic-variant-type
 	∣ '<' ['..'] '>'
 	| '<' method-type { ';' method-type } [';' ∣ ';..'] '>'  
 	∣ '#' class-path
 	∣ typexpr '#' class-path  
 	∣ '(' typexpr { ',' typexpr } ')' '#' class-path

A = B | C | D | E | F | Z
A - typexpr
B - [[?]label-name:]  typexpr ->  typexpr
C - typexpr  { * typexpr }+
D - typexpr  typeconstr
E - typexpr as 'ident
F - typexpr #  class-path
Z - the rest of the rule

where:

B = [G] A '->' A
G - [?]label-name:

C = A +('*' A)

D = A H
H - typeconstr

E = A 'as' I
I - ''' ident

F = A '#' J
J - class-path

where:

A =	['[?]label-name:'] A '->' A
	| A +('*' A)
	| A H
	| A 'as' I
	| A '#' J
	| Z

where:

A =	[G] A ('->' A)
	| A (+('*' A))
	| A (H)
	| A ('as' I)
	| A ('#' J)
	| Z

where:

(transformation for eliminating left recursion)

α and β do not start with A

A -> Aα | β

A -> βA'
A'-> αA' | epsilon

where:

F = Z F'
F'= ('#' J) F' | epsilon

E = F E'
E'= ('as' I) E' | epsilon

D = E D'
D'= (H) D' | epsilon

C = D C'
C'= (+('*' A)) C' | epsilon

B = [G] C B'
B'= ('->' A) B' | epsilon

where:

A = B | C | D | E | F | Z

where:

Refactored type expressions grammar:
=======================================

typexprZ ::=
	''' ident
	| '_'
	| '(' typexpr ')'
	| typeconstr
	| '(' typexpr { , typexpr } ')' typeconstr
	| polymorphic-variant-type
	| '<' ['..'] '>'
	| '<' method-type {';' method-type} [';' ∣ ';..'] '>'
	| '#' class-path
	| '(' typexpr  {',' typexpr} ')' '#' class-path

typexprF ::= typexprZ typexprF'
typexprF'::= ('#' class-path) typexprF' | epsilon

typexprE ::= typexprF typexprE'
typexprE'::= ('as' ''' ident) typexprE' | epsilon

typexprD ::= typexprE typexprD'
typexprD'::= typeconstr typexprD' | epsilon

typexprC ::= typexprD typexprC'
typexprC'::= +('*' typexpr) typexprC' | epsilon

typexprB ::= [[?]label-name:] typexprC typexprB'
typexprB'::= ('->' typexpr) typexprB' | epsilon

typexpr ::= 
	typexprB
	| typexprC
	| typexprD
	| typexprE
	| typexprF
	| typexprZ

